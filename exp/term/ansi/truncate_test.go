package ansi

import (
	"testing"
)

var tcases = []struct {
	name   string
	input  string
	tail   string
	width  int
	expect string
}{
	{"empty", "", "", 0, ""},
	{"simple", "foobar", "", 3, "foo"},
	{"passthrough", "foobar", "", 10, "foobar"},
	{"ascii", "hello", "", 3, "hel"},
	{"emoji", "ðŸ‘‹", "", 2, "ðŸ‘‹"},
	{"wideemoji", "ðŸ«§", "", 2, "ðŸ«§"},
	{"controlemoji", "\x1b[31mhello ðŸ‘‹abc\x1b[0m", "", 8, "\x1b[31mhello ðŸ‘‹\x1b[0m"},
	{"osc8", "\x1b]8;;https://charm.sh\x1b\\Charmbracelet ðŸ«§\x1b]8;;\x1b\\", "", 5, "\x1b]8;;https://charm.sh\x1b\\Charm\x1b]8;;\x1b\\"},
	{"osc8_8bit", "\x9d8;;https://charm.sh\x9cCharmbracelet ðŸ«§\x9d8;;\x9c", "", 5, "\x9d8;;https://charm.sh\x9cCharm\x9d8;;\x9c"},
	{"style_tail", "\x1B[38;5;219mHiya!", "â€¦", 3, "\x1B[38;5;219mHiâ€¦"},
	{"double_style_tail", "\x1B[38;5;219mHiya!\x1B[38;5;219mHello", "â€¦", 7, "\x1B[38;5;219mHiya!\x1B[38;5;219mHâ€¦"},
	{"noop", "\x1B[7m--", "", 2, "\x1B[7m--"},
	{"double_width", "\x1B[38;2;249;38;114mä½ å¥½\x1B[0m", "", 3, "\x1B[38;2;249;38;114mä½ \x1B[0m"},
	{"double_width_rune", "ä½ ", "", 1, ""},
	{"double_width_runes", "ä½ å¥½", "", 2, "ä½ "},
	{"spaces_only", "    ", "â€¦", 2, " â€¦"},
	{"longer_tail", "foo", "...", 2, ""},
	{"same_tail_width", "foo", "...", 3, "..."},
	{"same_tail_width_control", "\x1b[31mfoo\x1b[0m", "...", 3, "\x1b[31m...\x1b[0m"},
	{"same_width", "foo", "", 3, "foo"},
	{"truncate_with_tail", "foobar", ".", 4, "foo."},
	{"style", "I really \x1B[38;2;249;38;114mlove\x1B[0m Go!", "", 8, "I really\x1B[38;2;249;38;114m\x1B[0m"},
	{"dcs", "\x1BPq#0;2;0;0;0#1;2;100;100;0#2;2;0;100;0#1~~@@vv@@~~@@~~$#2??}}GG}}??}}??-#1!14@\x1B\\foobar", "â€¦", 4, "\x1BPq#0;2;0;0;0#1;2;100;100;0#2;2;0;100;0#1~~@@vv@@~~@@~~$#2??}}GG}}??}}??-#1!14@\x1B\\fooâ€¦"},
	{"emoji_tail", "\x1b[36mHello there!\x1b[m", "ðŸ˜ƒ", 8, "\x1b[36mHello ðŸ˜ƒ\x1b[m"},
	{"unicode", "\x1b[35mClaireâ€˜s Boutique\x1b[0m", "", 8, "\x1b[35mClaireâ€˜s\x1b[0m"},
}

func TestTruncate(t *testing.T) {
	for i, c := range tcases {
		t.Run(c.name, func(t *testing.T) {
			if result := Truncate(c.input, c.width, c.tail); result != c.expect {
				t.Errorf("test case %d failed: expected %q, got %q", i+1, c.expect, result)
			}
		})
	}
}

func BenchmarkTruncateString(b *testing.B) {
	b.RunParallel(func(pb *testing.PB) {
		b.ReportAllocs()
		b.ResetTimer()
		for pb.Next() {
			Truncate("foo", 2, "")
		}
	})
}
